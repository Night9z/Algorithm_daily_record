今天难点主要在滑动窗口以及边界条件的注意。首先滑动窗口重点
滑动窗口算法的关键点
1. 窗口的扩大和缩小
扩大窗口：通常由右指针向右移动来实现，不断将新的元素加入到当前窗口。
缩小窗口：当满足特定条件时，通过左指针向右移动来缩小窗口，并从窗口中移出元素。
2. 边界条件的处理
初始状态：左指针和右指针的初始位置以及窗口内变量（如和、计数等）的初始值。
窗口扩大和缩小的条件：如何判断何时扩大窗口（右指针移动）以及何时缩小窗口（左指针移动）。
结果的更新：在满足条件的情况下，如何更新结果变量。
特殊情况：处理数组为空、所有元素都不能满足条件等特殊情况。
滑动窗口算法示范代码
以题目 "长度最小的子数组" 为例，使用滑动窗口算法实现。

class Solution {

    // 滑动窗口
    public int minSubArrayLen(int s, int[] nums) {
        int left = 0;  // 初始化左指针
        int sum = 0;   // 初始化当前窗口的和
        int result = Integer.MAX_VALUE;  // 初始化最小长度为最大整数，表示无穷大

        // 遍历数组，right 是右指针
        for (int right = 0; right < nums.length; right++) {
            sum += nums[right];  // 将当前右指针指向的元素加入窗口的和
            
            // 当当前窗口的和大于等于 s 时，尝试缩小窗口
            while (sum >= s) {
                // 更新最小长度，如果当前窗口长度小于已记录的最小长度，更新最小长度
                result = Math.min(result, right - left + 1);
                // 将左指针指向的元素移出窗口的和，并将左指针右移
                sum -= nums[left++];
            }
        }
        
        // 如果结果没有更新，返回 0，否则返回结果
        return result == Integer.MAX_VALUE ? 0 : result;
    }
    
    public static void main(String[] args) {
        Solution solution = new Solution();
        int[] nums1 = {2, 3, 1, 2, 4, 3};
        int s1 = 7;
        System.out.println(solution.minSubArrayLen(s1, nums1));  // 输出 2
    }
}

滑动窗口算法总结
初始化：

左指针 left 初始化为 0。
窗口内的和 sum 初始化为 0。
结果变量 result 初始化为 Integer.MAX_VALUE（表示无穷大）。
遍历数组：

使用右指针 right 遍历数组。
每次将当前右指针指向的元素加入 sum 中。
调整窗口：

当 sum >= s 时，说明当前窗口已经满足条件。
更新 result，记录当前窗口的长度 right - left + 1，并与已记录的最小长度进行比较。
将左指针指向的元素从 sum 中移除，并将左指针右移。
返回结果：

如果 result 仍为初始值 Integer.MAX_VALUE，说明没有找到符合条件的子数组，返回 0。
否则，返回 result。
边界条件注意事项
数组为空：如果输入数组为空，应该直接返回 0。
数组中没有符合条件的子数组：如果在遍历过程中没有找到任何和大于等于 s 的子数组，结果变量 result 将保持为初始值 Integer.MAX_VALUE，此时应返回 0。
所有元素都满足条件：如果每个单个元素都满足和大于等于 s 的条件，滑动窗口算法仍然可以正确处理，并找到最小的子数组长度。