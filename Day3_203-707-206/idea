这部分最大的问题在于707。首先总结一下要点：
单链表的实现
虚拟头结点：

使用虚拟头结点可以简化在头部添加和删除节点的逻辑，避免了对空链表的特殊处理。
方法细节：

get(int index)：遍历从虚拟头结点开始，直到达到指定的 index。
addAtHead(int val)：在虚拟头结点之后直接添加新节点。
addAtTail(int val)：遍历到链表的末尾，然后添加新节点。
addAtIndex(int index, int val)：在指定的位置插入新节点，需要找到该位置的前一个节点。
deleteAtIndex(int index)：删除指定位置的节点，同样需要定位到该节点的前一个节点。
错误处理：

确保 index 的合法性，如在 get、addAtIndex 和 deleteAtIndex 方法中检查 index 是否在合法范围内。
双链表的实现
虚拟头结点和虚拟尾结点：

使用虚拟头尾节点来简化在链表头部和尾部的操作，同时保证链表始终有一个非空的前驱和后继节点，这对双链表的操作特别重要。
方法细节：

get(int index)：根据 index 的位置，决定是从头开始遍历还是从尾开始，以优化访问时间。
addAtHead(int val) 和 addAtTail(int val)：通过调用 addAtIndex 实现，提高代码复用。
addAtIndex(int index, int val)：在双链表中插入节点，需要正确处理 next 和 prev 指针。
deleteAtIndex(int index)：删除节点时，需要正确更新前驱和后继节点的指针，避免链表断裂。
遍历优化：

在 get(int index) 方法中，根据索引位置是靠近头部还是尾部，选择最优的遍历起点，以减少遍历步数。
错误处理和边界条件：

在所有操作前验证 index 的有效性。
在操作双链表时，特别注意维护 prev 和 next 指针的正确性，尤其是在添加和删除操作中。
共同注意点
每次添加或删除节点后，更新链表的 size 属性。
考虑特殊情况，如链表为空、只有一个节点时的操作。
在添加和删除操作中，保证链表的结构不被破坏。
这些实现展示了如何在Java中用面向对象的方式操作链表结构，通过虚拟头尾节点的使用来简化编程难度，并提高代码的可维护性和可读性。
要非常注意是<= index(正好到达目标)还是< index(到达目标的前一个)。还有如果是反get index 的话 > index 就是正好index